// <auto-generated />
using System;
using IntergalacticRaceLeague.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntergalacticRaceLeague.DAL.Migrations
{
    [DbContext(typeof(IntergalacticRaceLeagueDbContext))]
    [Migration("20250312010052_RaceResultRelationship")]
    partial class RaceResultRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IntergalacticRaceLeague.Models.RaceResult", b =>
                {
                    b.Property<int>("RaceResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceResultId"));

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedRacersIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("RaceResultId");

                    b.HasIndex("TournamentId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("IntergalacticRaceLeague.Models.Racer", b =>
                {
                    b.Property<int>("RacerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RacerId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SelectedTournamentIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("RacerId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Racers");
                });

            modelBuilder.Entity("IntergalacticRaceLeague.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("IntergalacticRaceLeague.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("RacerRaceResults", b =>
                {
                    b.Property<int>("RacerId")
                        .HasColumnType("int");

                    b.Property<int>("RaceResultId")
                        .HasColumnType("int");

                    b.HasKey("RacerId", "RaceResultId");

                    b.HasIndex("RaceResultId");

                    b.ToTable("RacerRaceResults", (string)null);
                });

            modelBuilder.Entity("RacerTournament", b =>
                {
                    b.Property<int>("RacerId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("RacerId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("RacerTournament", (string)null);
                });

            modelBuilder.Entity("IntergalacticRaceLeague.Models.RaceResult", b =>
                {
                    b.HasOne("IntergalacticRaceLeague.Models.Tournament", "Tournament")
                        .WithMany("RaceResults")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("IntergalacticRaceLeague.Models.Racer", b =>
                {
                    b.HasOne("IntergalacticRaceLeague.Models.Vehicle", "Vehicle")
                        .WithOne("Racer")
                        .HasForeignKey("IntergalacticRaceLeague.Models.Racer", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RacerRaceResults", b =>
                {
                    b.HasOne("IntergalacticRaceLeague.Models.RaceResult", null)
                        .WithMany()
                        .HasForeignKey("RaceResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntergalacticRaceLeague.Models.Racer", null)
                        .WithMany()
                        .HasForeignKey("RacerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RacerTournament", b =>
                {
                    b.HasOne("IntergalacticRaceLeague.Models.Racer", null)
                        .WithMany()
                        .HasForeignKey("RacerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntergalacticRaceLeague.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntergalacticRaceLeague.Models.Tournament", b =>
                {
                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("IntergalacticRaceLeague.Models.Vehicle", b =>
                {
                    b.Navigation("Racer");
                });
#pragma warning restore 612, 618
        }
    }
}
